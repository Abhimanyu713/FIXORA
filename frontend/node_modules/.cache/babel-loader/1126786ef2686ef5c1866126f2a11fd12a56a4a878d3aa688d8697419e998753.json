{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manis\\\\Desktop\\\\startup\\\\FIXORA\\\\frontend\\\\src\\\\config\\\\WebRTC\\\\signallingServer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebRTC = () => {\n  _s();\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const pc = useRef(null); // peer connection\n  const [localStream, setLocalStream] = useState(null);\n  useEffect(() => {}, []);\n  // 1. Get camera + mic\n  const startCamera = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n    setLocalStream(stream);\n    localVideoRef.current.srcObject = stream;\n  };\n\n  // 2. Create PeerConnection\n  const createPeerConnection = () => {\n    pc.current = new RTCPeerConnection();\n\n    // send local tracks\n    localStream.getTracks().forEach(track => pc.current.addTrack(track, localStream));\n\n    // when remote stream arrives\n    pc.current.ontrack = event => {\n      remoteVideoRef.current.srcObject = event.streams[0];\n    };\n  };\n\n  // 3. Create Offer\n  const createOffer = async () => {\n    createPeerConnection();\n    const offer = await pc.current.createOffer();\n    await pc.current.setLocalDescription(offer);\n\n    // send offer.sdp to signaling server\n    console.log(\"Offer SDP:\", offer);\n  };\n\n  // 4. Create Answer\n  const createAnswer = async offer => {\n    createPeerConnection();\n    await pc.current.setRemoteDescription(new RTCSessionDescription(offer));\n    const answer = await pc.current.createAnswer();\n    await pc.current.setLocalDescription(answer);\n\n    // send answer.sdp back to signaling server\n    console.log(\"Answer SDP:\", answer);\n  };\n\n  // 5. Add remote answer from peer\n  const addAnswer = async answer => {\n    if (!pc.current.currentRemoteDescription) {\n      await pc.current.setRemoteDescription(new RTCSessionDescription(answer));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"React WebRTC Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startCamera,\n      children: \"Start Camera\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createOffer,\n      children: \"Create Offer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"20px\",\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: localVideoRef,\n        autoPlay: true,\n        playsInline: true,\n        muted: true,\n        style: {\n          width: \"300px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: remoteVideoRef,\n        autoPlay: true,\n        playsInline: true,\n        style: {\n          width: \"300px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(WebRTC, \"TaA0JKDsm81TAWBot6R35HB7944=\");\n_c = WebRTC;\nexport default WebRTC;\nvar _c;\n$RefreshReg$(_c, \"WebRTC\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","WebRTC","_s","localVideoRef","remoteVideoRef","pc","localStream","setLocalStream","startCamera","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","createPeerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","ontrack","event","streams","createOffer","offer","setLocalDescription","console","log","createAnswer","setRemoteDescription","RTCSessionDescription","answer","addAnswer","currentRemoteDescription","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","display","gap","marginTop","ref","autoPlay","playsInline","muted","width","_c","$RefreshReg$"],"sources":["C:/Users/manis/Desktop/startup/FIXORA/frontend/src/config/WebRTC/signallingServer.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst WebRTC = () => {\r\n  const localVideoRef = useRef(null);\r\n  const remoteVideoRef = useRef(null);\r\n  const pc = useRef(null); // peer connection\r\n  const [localStream, setLocalStream] = useState(null);\r\n\r\n  useEffect(()=>{\r\n    \r\n  },[])\r\n  // 1. Get camera + mic\r\n  const startCamera = async () => {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n    setLocalStream(stream);\r\n    localVideoRef.current.srcObject = stream;\r\n  };\r\n\r\n  // 2. Create PeerConnection\r\n  const createPeerConnection = () => {\r\n    pc.current = new RTCPeerConnection();\r\n\r\n    // send local tracks\r\n    localStream.getTracks().forEach(track => pc.current.addTrack(track, localStream));\r\n\r\n    // when remote stream arrives\r\n    pc.current.ontrack = (event) => {\r\n      remoteVideoRef.current.srcObject = event.streams[0];\r\n    };\r\n  };\r\n\r\n  // 3. Create Offer\r\n  const createOffer = async () => {\r\n    createPeerConnection();\r\n\r\n    const offer = await pc.current.createOffer();\r\n    await pc.current.setLocalDescription(offer);\r\n\r\n    // send offer.sdp to signaling server\r\n    console.log(\"Offer SDP:\", offer);\r\n  };\r\n\r\n  // 4. Create Answer\r\n  const createAnswer = async (offer) => {\r\n    createPeerConnection();\r\n\r\n    await pc.current.setRemoteDescription(new RTCSessionDescription(offer));\r\n    const answer = await pc.current.createAnswer();\r\n    await pc.current.setLocalDescription(answer);\r\n\r\n    // send answer.sdp back to signaling server\r\n    console.log(\"Answer SDP:\", answer);\r\n  };\r\n\r\n  // 5. Add remote answer from peer\r\n  const addAnswer = async (answer) => {\r\n    if (!pc.current.currentRemoteDescription) {\r\n      await pc.current.setRemoteDescription(new RTCSessionDescription(answer));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>React WebRTC Demo</h2>\r\n      <button onClick={startCamera}>Start Camera</button>\r\n      <button onClick={createOffer}>Create Offer</button>\r\n\r\n      <div style={{ display: \"flex\", gap: \"20px\", marginTop: \"20px\" }}>\r\n        <video ref={localVideoRef} autoPlay playsInline muted style={{ width: \"300px\" }} />\r\n        <video ref={remoteVideoRef} autoPlay playsInline style={{ width: \"300px\" }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WebRTC;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,aAAa,GAAGN,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMO,cAAc,GAAGP,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMQ,EAAE,GAAGR,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EACzB,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEpDF,SAAS,CAAC,MAAI,CAEd,CAAC,EAAC,EAAE,CAAC;EACL;EACA,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACtFP,cAAc,CAACE,MAAM,CAAC;IACtBN,aAAa,CAACY,OAAO,CAACC,SAAS,GAAGP,MAAM;EAC1C,CAAC;;EAED;EACA,MAAMQ,oBAAoB,GAAGA,CAAA,KAAM;IACjCZ,EAAE,CAACU,OAAO,GAAG,IAAIG,iBAAiB,CAAC,CAAC;;IAEpC;IACAZ,WAAW,CAACa,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIhB,EAAE,CAACU,OAAO,CAACO,QAAQ,CAACD,KAAK,EAAEf,WAAW,CAAC,CAAC;;IAEjF;IACAD,EAAE,CAACU,OAAO,CAACQ,OAAO,GAAIC,KAAK,IAAK;MAC9BpB,cAAc,CAACW,OAAO,CAACC,SAAS,GAAGQ,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;IACrD,CAAC;EACH,CAAC;;EAED;EACA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BT,oBAAoB,CAAC,CAAC;IAEtB,MAAMU,KAAK,GAAG,MAAMtB,EAAE,CAACU,OAAO,CAACW,WAAW,CAAC,CAAC;IAC5C,MAAMrB,EAAE,CAACU,OAAO,CAACa,mBAAmB,CAACD,KAAK,CAAC;;IAE3C;IACAE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,KAAK,CAAC;EAClC,CAAC;;EAED;EACA,MAAMI,YAAY,GAAG,MAAOJ,KAAK,IAAK;IACpCV,oBAAoB,CAAC,CAAC;IAEtB,MAAMZ,EAAE,CAACU,OAAO,CAACiB,oBAAoB,CAAC,IAAIC,qBAAqB,CAACN,KAAK,CAAC,CAAC;IACvE,MAAMO,MAAM,GAAG,MAAM7B,EAAE,CAACU,OAAO,CAACgB,YAAY,CAAC,CAAC;IAC9C,MAAM1B,EAAE,CAACU,OAAO,CAACa,mBAAmB,CAACM,MAAM,CAAC;;IAE5C;IACAL,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEI,MAAM,CAAC;EACpC,CAAC;;EAED;EACA,MAAMC,SAAS,GAAG,MAAOD,MAAM,IAAK;IAClC,IAAI,CAAC7B,EAAE,CAACU,OAAO,CAACqB,wBAAwB,EAAE;MACxC,MAAM/B,EAAE,CAACU,OAAO,CAACiB,oBAAoB,CAAC,IAAIC,qBAAqB,CAACC,MAAM,CAAC,CAAC;IAC1E;EACF,CAAC;EAED,oBACElC,OAAA;IAAAqC,QAAA,gBACErC,OAAA;MAAAqC,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BzC,OAAA;MAAQ0C,OAAO,EAAElC,WAAY;MAAA6B,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnDzC,OAAA;MAAQ0C,OAAO,EAAEhB,WAAY;MAAAW,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEnDzC,OAAA;MAAK2C,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,GAAG,EAAE,MAAM;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAT,QAAA,gBAC9DrC,OAAA;QAAO+C,GAAG,EAAE5C,aAAc;QAAC6C,QAAQ;QAACC,WAAW;QAACC,KAAK;QAACP,KAAK,EAAE;UAAEQ,KAAK,EAAE;QAAQ;MAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnFzC,OAAA;QAAO+C,GAAG,EAAE3C,cAAe;QAAC4C,QAAQ;QAACC,WAAW;QAACN,KAAK,EAAE;UAAEQ,KAAK,EAAE;QAAQ;MAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3E,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvC,EAAA,CAvEID,MAAM;AAAAmD,EAAA,GAANnD,MAAM;AAyEZ,eAAeA,MAAM;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}